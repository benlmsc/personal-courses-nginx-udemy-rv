# We can set multiple worker processes
# Note (1): Increasing the number of worker doesn't necessarily equal to better performance. By default, a NGINX worker
#           process handle requests in asynchronous way, meaning it handle requests as fast as the hardware is capable of.
#           Creating nother workers doesn't increase the hardware's capability. Each worker runs on a CPU core, so in general,
#           we can set the number of processes as the server CPU has.
# To list the number of proc on MacOS, we can use the command: sysctl -n hw.logicalcpu
# Or we can list CPU detail by using the command: sysctl -a | grep cpu | grep hw
# Note (2): By default, NGINX uses 1 worker. But we can set it to auto to spawn one worker to each CPU
# worker_processes 8;
worker_processes auto;

# Note (1): HTTP 2 is binary protocol while HTTP 1 is a textual protocol. Binary protocol is far more compact than textual
#           protocol and reduces the risk of data loss.
# Note (2): HTTP 2 compresses response headers which reduces transfers time
# Note (3): HTTP 2 uses persistent connections which are also multiplex. Multiplex streaming means differents assets (HTML,
#           CSS, JS) can be combined into a single stream of binary data and transmited into a single response
# Note (4): HTTP 2 can perfomr a server push, meaning the client can be informed of assets asking with the initial request


# To keep the configuration valid, we need to kkeep this context (i.e. events)
events {
  # Set the number of connections each worker process can accept.
  # The serve has a limit to how many files can be open at once for each CPU core.
  # We can check the open file limit by using this command: ulimit -n
  # The maximum number of connections is determinated by worker_processes multiplying worker_connections. Each worker
  # process can open n worker connections.
  worker_connections 5120;
}

http {
#   # This context allows us to define Content-Type to certain files
#   types {
#     # Here we can force Content-Type to text/html for any file with .html extension
#     text/html html;
#     # Here we can force Content-Type to text/css for any file with .css extension
#     text/css css;
#   }

  # We can include other configuration files into this configuration file
  # Here we can import mime.types which is a configuration file containing all we need to identify
  # the type of information that a file contains
  include mime.types;

  # We can compress the response into GZIP to decrease the time response by using the gzip directive
  gzip on;
  # The amount of compression use
  # Note (1): when we use smaller number, the compression is low as the hardware resource needed for the compression. But
  #           more the number increase more the hardware resource increase as well
  # Note (2): at level 5, the compression gain becomes minor. 3 or 4 are good levels compression
  # Note (3): work only if the client sends the "Accept-Encoding: gzip" header
  gzip_comp_level 3;
  # Set the types of files we want to compress
  gzip_types text/css;
  gzip_types text/javascript;

  # Redirect all traffic to HTTPS
  server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
  }

  # A server context (Virtual Host in Apache) is responsible to listening on a port for a given IP address or domain
  server {
    # Directive to listen on port 80 (HTTP)
#     listen 80;
    # If we use HTTP 2, we need to use SSL (HTTPS)
    listen 443 ssl http2;
    # Directive to set the server IP address or domain
    server_name localhost;
    # Directive to serve request or interpretin static requests from
    root /sites/demo;

    # Diretive that tells what file to serve when a drectory is reached
    index index.html;

    # To use SSL, we need to provide the SSL certificate
    ssl_certificate /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key;

    # Disable SSL protocol and enable TLS protocol
    # Note (1): We disable SSL protocol which is outdated and been replaced by TLS protocol
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # Optimize cipher suits (TODO: learn more about ciphers)
    ssl_prefer_server_ciphers on;
    # We define a cypher suits to use or not use
    # Note (1): Separated by using : symbol
    # Note (2): Removed by prefixing ! symbol
    ssl_ciphers ECDH+AESGCM:ECDH+AER256:ECDH+AES128:DH+3DES:!AECDH:!MD5;

    # Enable DH params
    # Note (1): Having DH parameters enabled allws the server to perform key exchanges (between client and server) with
    #           perfect secrecy (cf. https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # Enable HSTS, which is a header that tells to the browser to not download anything of HTTP
    add_header Strict-Transport-Security "max-age=31536000" always;

    # Enable simple cache for SSL session
    ssl_session_cache shared:SSL:40m;
    ssl_session_timeout 4h;
    ssl_session_tickets on;


    # Try files example. Try files check for a resource to respond with any number of locations relative to the root,
    # with a final argument that results in are write
    # Note (1): Can be used in server context or location context as well
    # Note (2): Last argument will be treated as a rewrite
    # Note (3): try_files in server context replace EVERY indeterminate URI. To fix this, we can add $uri before every
    #           fallbacks

    # Here if /thumb.png, the /greet serves as a fallback
#     try_files $uri /cat.png /thumb.png /greet /friendly_404;
#     try_files $uri /cat.png /greet /friendly_404;
#     try_files $uri /cat.png /greet /friendly_404 @named_location_example;
    # =404 matches the defult NGINX 404 page
#     try_files $uri /cat.png /greet /friendly_404 @named_location_example =404;

    # Location is the most used context. It allows us to define and configure the behavior of specific URI/request.
    # We can think of location context of location path interceptor and response handler.

    location = /index.html {
      # http2_push directive allows us to push files deps when index.html is requested.
      # We can see the difference through nghttp package
      http2_push /style.css;
      http2_push /thumb.png;
    }

    # By default, every location matches prefix (i.e. for /greet location, it will match every /greet* like /greeting, /greet/12, etc)
    # Note (1): every location is case sensitive
    # Note (2): Regex match logic has a greater priority than Prefix match if it equal. This means that regardless of the
    #           order, if there is a double match (prefix and regex) on a path, then the one used will be regex in order
    #           of their appearance in this config file (cf. http://nginx.org/en/docs/http/ngx_http_core_module.html#location).
    # Note (3): Exact match (= symbol) > Preferential Prefix match (^~ symbol) > Regex match (~ and ~* symbols) > Prefix match (no symbol)

    # Prefix match logic (default, no symbol)
    location /greet {
      # We can return a static response using this directive with status and text/url
      return 200 "Hello from NGINX /greet location";
    }

    # Exact match logic (= symbol)
    location = /hello {
      return 200 "Hello World!";
    }

    # Regex match logic (~ symbol)
    location ~ /number[0-9] {
      return 200 "Hello number!";
    }

    # Regex match logic (~ symbol) case insensitive (* symbol)
    location ~* /number[0-9] {
      return 200 "Hello number!";
    }

    # Preferential Prefix match (same as Prefix matcher but with a greater importance than Regex matcher)
    location ^~ /number2 {
      return 200 "Welcome number 2!";
    }

    # IF statement example.
    # Note (1): Don't use it inside location! (cf. https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/)
#     if ($arg_apikey != 1234) {
#       return 401 "Incorrect API Key";
#     }

    # Create a variable example.
    # Note (1): Variables can be set to strings, integers or boolean
    set $weekend "No";

    # Check if it is wkd
    # Note (1): $date_local is a global NGINX variable
    # Note (2): By using the ~ symbol we can pass a Regex after to test our NGINX variable
    if ($date_local ~ 'Saturday|Sunday') {
      set $weekend "Yes";
    }

    # There are two types of variables. Our variables and the NGINX global variables (cf. http://nginx.org/en/docs/varindex.html).
    location /inspect {
      # Based on the query, NGINX compiles each query parameter into variable prefixed by "arg_".
      # (e.g http://localhost/inspect?name=ben => $arg_name = ben)
      return 200 "Host: $host\nURI: $uri\nRequest parameters (as a string): $args\nName (query parameter): $arg_name\n\nIs the weekend? $weekend";
    }

    # Redirect example (we use a 3xx status with a relative or absolute path)
    location /logo {
      return 307 /thumb.png;
    }

    # Rewrite example
    # Note (1): rewrites are performance consuming because the NGINX here will repass into the whole process
    # Note (2): last directive allows us to stop the rewrite here
#     rewrite ^/user/(\w+) /welcome/$1 last;
    # We can rewrite of rewrite
#     rewrite ^/welcome/logo /thumb.png;

    location /welcome {
      return 200 "Welcome all!";
    }

    location /welcome/ben {
      return 200 "Welcome Ben!";
    }

    location /friendly_404 {
      return 404 "Friendly 404 ðŸ˜ƒ";
    }

    location @named_location_example {
      return 200 "Named Location example";
    }

    location = /thumb.png {
      # We can add header to a location
      add_header my_header "Hello World!";
      # We can tell to the client this resource can be cache in anyway (cf. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)
      add_header Cache-Control public;
      # The request can change based on the value of the header (cf. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary)
      add_header Vary Accept-Encoding;

      # We can set the expiration cache
      expires 1M;
    }

    # Skip bufering for static files (performance)
    sendfile on;

    # Optimize sendfile packets (in other words the size of our static files)
    tcp_nopush on;
  }
}